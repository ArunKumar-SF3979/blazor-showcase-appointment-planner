@page "/doctors/doctorsdetails/{Id:int}"

@using AppointmentPlanner.Data;
@using AppointmentPlanner.Models;
@using Microsoft.AspNetCore.Components.Forms;
@inject NavigationManager UriHelper

<link href="css/appoinment/doctordetails.css" rel="stylesheet" />
<div class="doctor-details-container">
    <header>
        <div class="detail-header-title">
            <span class="back-icon icon-previous" @onclick="@onBackIconClick"></span>
            <div class="module-title">
                <div class='title'>DOCTOR DETAILS</div>
                <div class='underline'></div>
            </div>
        </div>
        <div class='doctor-detail'>
            <SfButton Disabled="@((activeData != null) ? false : true)" CssClass="e-small delete-details" @onclick="@onDoctorDelete">Delete</SfButton>
            <SfButton Disabled="@((activeData != null) ? false : true)" CssClass="e-small edit-details" @onclick="@onDoctorEdit">Edit</SfButton>
        </div>
    </header>
    @if (activeData != null) { 
    <div class="active-doctor">
        <div class="active-doctor-image">
            <img class="value" src="css/appoinment/assets/images/@(activeData.Text).png" alt="doctor" />
            <span class='availability @(activeData.Availability)'></span>
        </div>
        <div class="active-doctor-info">
            <div class="basic-detail info-field-container">
                <div class="name">Dr. @activeData.Name</div>
                <div class="education">@(activeData.Education != null ? activeData.Education.ToUpper(): "")</div>
                <div class="designation">@activeData.Designation</div>
            </div>
            <div class="speciality-detail info-field-container">
                <div class="label-text">Specialization</div>
                <div class="specialization">@getSpecializationText</div>
            </div>
            <div class="work-experience info-field-container">
                <div class="label-text">Experience</div>
                <div class="experience">@activeData.Experience</div>
            </div>
            <div class="work-availability info-field-container">
                <div class="label-text">Availability</div>
                <div class="available-days">@getAvailability</div>
            </div>
            <div class="contact-info info-field-container">
                <div class="label-text">Mobile</div>
                <div class="mobile">@activeData.Mobile</div>
            </div>
        </div>
        <div class="work-days-container">
            <div class="work-days-content">
                <div class='work-day-item'>
                    @foreach (var data in activeData.WorkDays)
                    {
                        <div class="day-name">@(data.Day.Substring(0, 1).ToUpper())@data.Day.Substring(1)</div>
                        <div class="day-break-hours @(data.State)">@(getBreakDetails(data))</div>
                    }
                </div>
            </div>
        </div>
    </div>
    }
</div>

<SfDialog @bind-Visible="@this.isConfirmDelete" CssClass="confirm-dialog" Width="auto" IsModal="true" ShowCloseIcon="true">
    <DialogTemplates>
        <Header>
            <span>Doctor Details</span>
        </Header>
        <Content>
            Are you sure you want to delete this doctor?
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton ButtonModel="@deleteDoctorBtn" OnClick="@DeleteBtnClick"></DialogButton>
        <DialogButton ButtonModel="@cancelDoctorBtn" OnClick="@CancelBtnClick"></DialogButton>
    </DialogButtons>
</SfDialog>

<SfDialog Target="body" @ref="EdiDialogObj" Width="390px" CssClass='new-doctor-dialog' IsModal="true" @bind-Visible="@editVisible" ShowCloseIcon="true" Header="@editHeader" AnimationSettings="@dialogAnnimation">
    <ChildContent>
        <DialogEvents Opened="@EditDialogOpen"></DialogEvents>
        <EditForm ID="new-doctor-form" Model="@DoctorEditModel" OnValidSubmit="@HandleSubmit">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='Doctor Name' FloatLabelType="@FloatLabelType.Always" @bind-Value="@DoctorEditModel.Name"></SfTextBox>
                <ValidationMessage For="@(() => DoctorEditModel.Name)" />
            </div>
            <div class="gender-container">
                <div class="gender">
                    <div><label>Gender</label></div>
                    <div class='e-btn-group e-round-corner e-field'>
                        <input type="radio" ID="patientCheckMale" name="Gender" Value="Male" @onchange="@(()=> DoctorEditModel.Gender = "Male")" checked />
                        <label class="e-btn" for="patientCheckMale">Male</label>
                        <input type="radio" ID="patientCheckFemale" name="Gender" Value="Female" @onchange="@(()=> DoctorEditModel.Gender = "FeMale")" />
                        <label class="e-btn" for="patientCheckFemale">Female</label>
                    </div>
                </div>
                <div class="mobile" style="width:345px">
                    <SfMaskedTextBox CssClass="e-field" @ref="maskObj" Placeholder="Mobile Number" FloatLabelType="@FloatLabelType.Always" Mask="(999) 999-9999" @bind-Value="@DoctorEditModel.Mobile"></SfMaskedTextBox>
                    <ValidationMessage For="@(() => DoctorEditModel.Mobile)" />
                </div>
            </div>
            <div class="email-container">
                <SfTextBox CssClass='e-field' Placeholder='Email' FloatLabelType="@FloatLabelType.Always" @bind-Value="@DoctorEditModel.Email"></SfTextBox>
                <ValidationMessage For="@(() => DoctorEditModel.Email)" />
            </div>
            <div class="education-container">
                <div class="department">
                    <SfDropDownList FloatLabelType="@FloatLabelType.Always" Placeholder="Department" Width="160px" DataSource="@specializationData" @bind-Value="@DoctorEditModel.DepartmentId">
                        <DropDownListFieldSettings Text="Text" Value="DepartmentId"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
                <div class="education" style="width:345px">
                    <SfTextBox CssClass='e-field' Placeholder='Education' FloatLabelType="@FloatLabelType.Always" @bind-Value="@DoctorEditModel.Education"></SfTextBox>
                </div>
            </div>
            <div class="experience-container">
                <div class="experience">
                    <SfDropDownList FloatLabelType="@FloatLabelType.Always" Placeholder="Experience" Width="160px" @bind-Value="@DoctorEditModel.Experience" DataSource="@experienceData">
                        <DropDownListFieldSettings Text="Text" Value="Id"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
                <div class="designation" style="width:345px">
                    <SfTextBox CssClass='e-field' Placeholder='Designation' FloatLabelType="@FloatLabelType.Always" @bind-Value="@DoctorEditModel.Designation"></SfTextBox>
                </div>
            </div>
            <div class="duty-container">
                <SfDropDownList FloatLabelType="@FloatLabelType.Always" Placeholder="Duty Timing" @bind-Value="@DoctorEditModel.DutyTiming" DataSource="@dutyTimingsData">
                    <DropDownListFieldSettings Text="Text" Value="Id"></DropDownListFieldSettings>
                </SfDropDownList>
            </div>
            <div class="e-footer-content">
                <div class="button-container">
                    <button type="button" class="e-btn e-normal" @onclick="@onCancelClick">Cancel</button>
                    <button type="button" class="e-btn e-normal e-primary" @onclick="@UpdateEditModel">Save</button>
                </div>
            </div>
        </EditForm>
    </ChildContent>
</SfDialog>

@code{

    [Parameter]
    public int Id { get; set; }

    SfDialog EdiDialogObj;
    private SfMaskedTextBox maskObj { get; set; }

    private bool isConfirmDelete { get; set; }

    private ButtonModel deleteDoctorBtn { get; set; } = new ButtonModel { Content = "Ok", IsPrimary = true };
    private ButtonModel cancelDoctorBtn { get; set; } = new ButtonModel { Content = "Cancel" };


    private DialogAnimationSettings dialogAnnimation { get; set; } = new DialogAnimationSettings { Effect = DialogEffect.Zoom };

    private bool editVisible { get; set; } = false;

    public bool IsShowDialog { get; set; } = false;
    private DoctorsData activeData { get; set; }
    private string getSpecializationText { get; set; }
    private string getAvailability { get; set; }
    private string breakHeader { get; set; } = "Break Hours";
    private List<WorkDaysData> breakDay { get; set; }
    protected override void OnInitialized()
    {
        activeData = AppointmentService.getDoctorDetails(Id);
        activeData = (activeData == null) ? AppointmentService.getDoctorDetails(1) : activeData;
        activeData.WorkDays = activeData.WorkDays != null ? activeData.WorkDays : new List<WorkDaysData>();
        getSpecializationText = AppointmentService.getSpecializationText(activeData.Specialization);
        getAvailability = AppointmentService.getAvailability(activeData);
        breakDay = activeData.WorkDays;
    }
    private void onBackIconClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        UriHelper.NavigateTo("doctors/");
    }

    private string getBreakDetails(WorkDaysData data)
    {
        if (data.State == "TimeOff")
        {
            return "TIME OFF";
        }
        else if (data.State == "RemoveBreak")
        {
            return "---";
        }
        else
        {
            return AppointmentService.GetFormatDate((DateTime)data.BreakStartHour, "hh:mm tt") + "-" + AppointmentService.GetFormatDate((DateTime)data.BreakEndHour, "hh:mm tt");
        }
    }

    private void onAddBreak()
    {
        this.IsShowDialog = true;
    }

    private void dialogClosed(object args)
    {
        this.IsShowDialog = false;
    }

    private void onDoctorDelete(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        this.isConfirmDelete = true;
    }
    private void DeleteBtnClick()
    {
        List<DoctorsData> filterData = AppointmentService.DoctorsDatas.Where(item => item.Id != activeData.Id).ToList();
        List<HospitalData> hospitalFilterData = AppointmentService.HospitalDatas.Where(i => i.DoctorId != activeData.Id).ToList();
        AppointmentService.DoctorsDatas = filterData;
        AppointmentService.HospitalDatas = hospitalFilterData;
        if(AppointmentService.DoctorsDatas.Count() > 0)
        {
            activeData = AppointmentService.DoctorsDatas[0];
            this.getSpecializationText = AppointmentService.DoctorsDatas[0].Specialization;
        } else
        {
            activeData = null;
        }
        this.isConfirmDelete = false;
    }
    private void CancelBtnClick()
    {
        this.isConfirmDelete = false;
    }
    private void onDoctorEdit(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        editVisible = true;
        DoctorEditModel.Name = activeData.Name;
        DoctorEditModel.Text = activeData.Text;
        DoctorEditModel.Id = activeData.Id;
        DoctorEditModel.Color = activeData.Color != null ? activeData.Color : "";
        DoctorEditModel.Gender = activeData.Gender;
        DoctorEditModel.Mobile = activeData.Mobile;
        DoctorEditModel.Email = activeData.Email;
        DoctorEditModel.DepartmentId = activeData.DepartmentId;
        DoctorEditModel.Education = activeData.Education;
        DoctorEditModel.Experience = activeData.Experience;
        DoctorEditModel.Designation = activeData.Designation;
        DoctorEditModel.DutyTiming = activeData.DutyTiming;
        DoctorEditModel.Specialization = activeData.Specialization;
    }

    private void onCancelClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        editVisible = false;
    }

    public DoctorsData DoctorEditModel = new DoctorsData();
    private string editHeader { get; set; } = "Edit Doctor";

    private SpecializationData dropdownTempModel = new SpecializationData();

    private IDictionary<string, object> nameHtmlAttr = new Dictionary<string, object>() { { "name", "Name" } };

    private List<TextIdData> experienceData = AppointmentService.ExperienceData;

    private List<TextIdData> dutyTimingsData = AppointmentService.DutyTimings;

    private List<SpecializationData> specializationData { get; set; } = AppointmentService.SpecializationDatas;

    public async Task UpdateEditModel(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        DoctorsData getHours = updateWorkHours(activeData);
        string mobileNo = await this.maskObj.GetMaskedValue();
        var specialize = AppointmentService.DoctorsDatas.Where(i => i.DepartmentId == DoctorEditModel.DepartmentId).FirstOrDefault().Specialization;
        activeData = new DoctorsData(DoctorEditModel.Name, DoctorEditModel.Gender, activeData.Text, activeData.Id, DoctorEditModel.DepartmentId, activeData.Color, DoctorEditModel.Education, specialize, DoctorEditModel.Experience, DoctorEditModel.Designation, DoctorEditModel.DutyTiming, DoctorEditModel.Email, mobileNo, activeData.Availability, getHours.StartHour, getHours.EndHour, activeData.AvailableDays, activeData.WorkDays);
        getSpecializationText = activeData.Specialization;
        AppointmentService.DoctorsDatas[activeData.Id - 1] = activeData;
        string message = "Dr." + activeData.Name + "," + activeData.Specialization.Substring(0, 1).ToUpper() + activeData.Specialization.Substring(1);
        AppointmentService.ActivityDatas.Insert(0, new ActivityData { Name = "Updated Doctor", Message = message, Time = "10 mins ago", Type = "doctor", ActivityTime = DateTime.Now });
        editVisible = false;

    }

    public void HandleSubmit()
    {
        editVisible = false;
    }
    private DoctorsData updateWorkHours(DoctorsData data)
    {
        string dutyString = AppointmentService.DutyTimings.Where(item => item.Id.Equals(DoctorEditModel.DutyTiming)).FirstOrDefault().Text;
        string startHour;
        string endHour;
        int startValue;
        int endValue;
        if (dutyString == "10:00 AM - 7:00 PM")
        {
            startValue = 10;
            endValue = 19;
            startHour = "10:00";
            endHour = "19:00";
        }
        else if (dutyString == "08:00 AM - 5:00 PM")
        {
            startValue = 8;
            endValue = 17;
            startHour = "08:00";
            endHour = "17:00";
        }
        else
        {
            startValue = 12;
            endValue = 21;
            startHour = "12:00";
            endHour = "21:00";
        }
        foreach (var item in data.WorkDays)
        {
            item.WorkStartHour = ((DateTime)item.WorkStartHour).AddHours(startValue);
            item.WorkEndHour = ((DateTime)item.WorkEndHour).AddHours(endValue);
            item.BreakStartHour = item.BreakStartHour;
            item.BreakEndHour = item.BreakEndHour;
        }
        return new DoctorsData { StartHour = startHour, EndHour = endHour };
    }

    public void EditDialogOpen(object args)
    {
        this.IsShowDialog = false;
    }
}