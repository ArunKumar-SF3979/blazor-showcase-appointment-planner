@page "/doctors"

@using Newtonsoft.Json;
@using Newtonsoft.Json.Converters;
@using AppointmentPlanner.Data;
@using AppointmentPlanner.Models;

@inject NavigationManager UriHelper
@implements IDisposable;

<div id="doctors" class="doctors-wrapper">
    <header>
        <div class="module-title">
            <div class="title">DOCTORS LIST</div>
            <div class="underline"></div>
        </div>
        <div class="add-doctor" @onclick="@onAddDoctor">
            <div class="e-icon-add e-icons"></div>
            <div class="add-doctor-label">Add New</div>
        </div>
    </header>
    <div class="specialization-detail-wrapper">
        <div class="specialization-types">
            <SfDropDownList @ref="specObj" TItem="SpecializationData" TValue="string" Width="200px" ShowClearButton="true" DataSource="@specializationData" Placeholder="Select a Specialization" PopupHeight="230px">
                <DropDownListEvents TValue="string" ValueChange="@(e => onSpecializationChange(e))"></DropDownListEvents>
                <DropDownListFieldSettings Text="Text" Value="Id"></DropDownListFieldSettings>
                <DropDownListTemplates TItem="SpecializationData">
                    <ItemTemplate>
                        <div class="specialist-value">
                            <span class="@((context as SpecializationData).Id)" style="background: @((context as SpecializationData).Color)"></span>
                            <span class="name">@((context as SpecializationData).Text)</span>
                        </div>
                    </ItemTemplate>
                    <ValueTemplate>
                        <div class="specialist-value department-value">
                            <span class="@((context as SpecializationData).Id)" style="background: @((context as SpecializationData).Color)"></span>
                            <span class="name">@((context as SpecializationData).Text)</span>
                        </div>
                    </ValueTemplate>
                </DropDownListTemplates>
            </SfDropDownList>
            <SfButton CssClass="e-normal" @onclick="@onAddDoctor" IsPrimary="true">Add New Doctor</SfButton>
        </div>
        <div class="specialist-display">
            @foreach (var data in filteredDoctors)
            {
                <div class="e-cards specialist-item" id="Specialist_@(data.Id)" @onclick="@(e => onSpecialistClick(e, data.Id))">
                    <div class="e-card-content">
                        <div class="specialist-image">
                            <img class="profile" src="css/appoinment/assets/images/@(data.Text).png" alt="doctor" />
                            <span class="availability @data.Availability"></span>
                        </div>
                    </div>
                    <div class="specialist-detail">
                        <div class="name">
                            Dr. @data.Name
                        </div>
                        <div class="education">
                            @(data.Education != null ? data.Education.ToUpper(): "")
                        </div>
                        <div class="specialist-experience">
                            <div class="specialization">
                                <span class="label-text">Designation</span>
                                <span class="specialization-text">@data.Designation</span>
                            </div>
                            <div class="experience">
                                <span class="label-text">Experience</span>
                                <span class="specialization-text">@data.Experience</span>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@if (IsShowNewDialog)
{
<SfDialog Target="body" @ref="DialogObj" Width="390px" CssClass="new-doctor-dialog" IsModal="true" @bind-Visible="@IsShowNewDialog" ShowCloseIcon="true" Header="@editHeader" AnimationSettings="@dialogAnnimation">
    <ChildContent>
        <DialogEvents Closed="dialogClosed"></DialogEvents>
        <EditForm Model="@DoctorEditModel" class="new-doctor-form" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="name-container">
                <SfTextBox CssClass="doctor-name e-field" Placeholder="Doctor Name" FloatLabelType="@FloatLabelType.Always" @bind-Value="@DoctorEditModel.Name"></SfTextBox>
                <ValidationMessage For="@(() => DoctorEditModel.Name)" />
            </div>
            <div class="gender-container">
                <div class="gender">
                    <div><label>Gender</label></div>
                    <div class="e-btn-group e-round-corner e-field">
                        <input type="radio" ID="patientCheckMale" name="Gender" Value="Male" @onchange="@(() => DoctorEditModel.Gender = "Male")" checked />
                        <label class="e-btn" for="patientCheckMale">Male</label>
                        <input type="radio" ID="patientCheckFemale" name="Gender" Value="Female" @onchange="@(() => DoctorEditModel.Gender = "FeMale")" />
                        <label class="e-btn" for="patientCheckFemale">Female</label>
                    </div>
                </div>
                <div class="mobile" style="width:345px">
                    <SfMaskedTextBox CssClass="e-field" @ref="maskObj" Placeholder="Mobile Number" FloatLabelType="@FloatLabelType.Always" Mask="(999) 999-9999" @bind-Value="@DoctorEditModel.Mobile"></SfMaskedTextBox>
                    <ValidationMessage For="@(() => DoctorEditModel.Mobile)" />
                </div>
            </div>
            <div class="email-container">
                <SfTextBox CssClass="e-field" Placeholder="Email" FloatLabelType="@FloatLabelType.Always" @bind-Value="@DoctorEditModel.Email"></SfTextBox>
                <ValidationMessage For="@(() => DoctorEditModel.Email)" />
            </div>
            <div class="education-container">
                <div class="department">
                    <SfDropDownList FloatLabelType="@FloatLabelType.Always" Placeholder="Department" Width="160px" DataSource="@specializationData" @bind-Value="@DoctorEditModel.DepartmentId">
                        <DropDownListFieldSettings Text="Text" Value="DepartmentId"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
                <div class="education" style="width:345px">
                    <SfTextBox CssClass="e-field" Placeholder="Education" FloatLabelType="@FloatLabelType.Always" @bind-Value="@DoctorEditModel.Education"></SfTextBox>
                </div>
            </div>
            <div class="experience-container">
                <div class="experience">
                    <SfDropDownList FloatLabelType="@FloatLabelType.Always" Placeholder="Experience" Width="160px" @bind-Value="@DoctorEditModel.Experience" DataSource="@experienceData">
                        <DropDownListFieldSettings Text="Text" Value="Id"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
                <div class="designation" style="width:345px">
                    <SfTextBox CssClass="e-field" Placeholder="Designation" FloatLabelType="@FloatLabelType.Always" @bind-Value="@DoctorEditModel.Designation"></SfTextBox>
                </div>
            </div>
            <div class="duty-container">
                <SfDropDownList FloatLabelType="@FloatLabelType.Always" Placeholder="Duty Timing" @bind-Value="@DoctorEditModel.DutyTiming" DataSource="@dutyTimingsData">
                    <DropDownListFieldSettings text="Text" value="Id"></DropDownListFieldSettings>
                </SfDropDownList>
            </div>
            <div class="e-footer-content">
                <div class="button-container">
                    <button type="button" class="e-btn e-normal" @onclick="@onCancelClick">Cancel</button>
                    <button type="submit" class="e-btn e-normal e-primary">Save</button>
                </div>
            </div>
        </EditForm>
    </ChildContent>
</SfDialog>
}
@code{

    [Inject]
    protected AppointmentService Service { get; set; }
    SfDialog DialogObj;
    SfDropDownList<string, SpecializationData> specObj { get; set; }
    private List<DoctorsData> filteredDoctors { get; set; }
    private SfMaskedTextBox maskObj { get; set; }

    private SpecializationData specializeModel = new SpecializationData();
    private List<SpecializationData> specializationData { get; set; }

    public DoctorsData DoctorEditModel = new DoctorsData();

    public bool IsShowNewDialog { get; set; } = false;

    private string editHeader { get; set; } = "New Doctor";

    private DialogAnimationSettings dialogAnnimation { get; set; } = new DialogAnimationSettings { Effect = DialogEffect.Zoom };

    private SpecializationData dropdownTempModel = new SpecializationData();

    private List<TextIdData> experienceData { get; set; }

    private List<TextIdData> dutyTimingsData { get; set; }

    protected override void OnInitialized()
    {
        this.specializationData = Service.SpecializationDatas;
        this.experienceData = Service.ExperienceData;
        this.dutyTimingsData = Service.DutyTimings;
        this.filteredDoctors = Service.DoctorsDatas;
    }

    private void onAddDoctor(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        DoctorEditModel = new DoctorsData { Name = null, Gender = "Male", Mobile = null, Email = null, Education = null, Designation = null };
        this.IsShowNewDialog = true;
    }

    private void dialogClosed(object args)
    {
        this.IsShowNewDialog = false;
    }

    public async Task HandleValidSubmit(EditContext context)
    {
        DoctorsData initialData = Service.DoctorsDatas.FirstOrDefault();
        initialData = initialData != null ? initialData : new DoctorsData();
        DoctorsData getHours = updateWorkHours(initialData);
        string mobileNo = await this.maskObj.GetMaskedValue();
        var specialize = Service.DoctorsDatas.Where(i => i.DepartmentId == DoctorEditModel.DepartmentId).FirstOrDefault().Specialization;
        DoctorsData newDoctor = new DoctorsData(DoctorEditModel.Name, DoctorEditModel.Gender, "default", Service.DoctorsDatas.LastOrDefault().Id + 1, DoctorEditModel.DepartmentId, DoctorEditModel.Color, DoctorEditModel.Education, specialize, DoctorEditModel.Experience, DoctorEditModel.Designation, DoctorEditModel.DutyTiming, DoctorEditModel.Email, mobileNo, "available", getHours.StartHour, getHours.EndHour, initialData.AvailableDays, initialData.WorkDays);
        Service.DoctorsDatas.Add(newDoctor);
        if (specObj.Value != null)
        {
            filteredDoctors = Service.DoctorsDatas.Where(i => i.Specialization.Equals(specObj.Value)).ToList();
        }
        string message = "Dr." + newDoctor.Name + "," + newDoctor.Specialization.Substring(0, 1).ToUpper() + newDoctor.Specialization.Substring(1);
        Service.ActivityDatas.Insert(0, new ActivityData { Name = "Added New Doctor", Message = message, Time = "4 mins ago", Type = "doctor", ActivityTime = DateTime.Now });
        await DialogObj.Hide();
    }

    private DoctorsData updateWorkHours(DoctorsData data)
    {
        string dutyString = Service.DutyTimings.Where(item => item.Id.Equals(DoctorEditModel.DutyTiming)).FirstOrDefault().Text;
        string startHour;
        string endHour;
        int startValue;
        int endValue;
        if (dutyString == "10:00 AM - 7:00 PM")
        {
            startValue = 10;
            endValue = 19;
            startHour = "10:00";
            endHour = "19:00";
        }
        else if (dutyString == "08:00 AM - 5:00 PM")
        {
            startValue = 8;
            endValue = 17;
            startHour = "08:00";
            endHour = "17:00";
        }
        else
        {
            startValue = 12;
            endValue = 21;
            startHour = "12:00";
            endHour = "21:00";
        }
        return new DoctorsData { StartHour = startHour, EndHour = endHour };
    }

    private void onSpecialistClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs args, int Id)
    {
        UriHelper.NavigateTo("doctors/doctorsdetails/" + Id);
    }

    private int? selectedDepartmentId { get; set; }

    private void onSpecializationChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> eventArgs)
    {
        List<DoctorsData> filteredData;
        if (eventArgs.Value != null)
        {
            SpecializationData items = JsonConvert.DeserializeObject<SpecializationData>(eventArgs.ItemData.ToString());
            this.selectedDepartmentId = items.DepartmentId;
            filteredData = Service.DoctorsDatas.Where(i => i.Specialization.Equals(items.Id)).ToList();
        }
        else
        {
            this.selectedDepartmentId = null;
            filteredData = Service.DoctorsDatas;
        }
        filteredDoctors = filteredData;
    }
    private void onCancelClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        this.DialogObj.Hide();
        this.IsShowNewDialog = false;
    }

    public void Dispose()
    {
        GC.SuppressFinalize(this);
    }
}