@page "/schedule"

@using Newtonsoft.Json;
@using AppointmentPlanner.Data;
@using AppointmentPlanner.Models;
@using Microsoft.JSInterop;

<div class="planner-calendar">
    <div class="drag-sample-wrapper droppable">
        <div class="col-lg-9 col-md-9 col-sm-9" style="padding: 0px">
            <div class="schedule-container e-droppable">
                <EjsSchedule ID="schedule" TValue="HospitalData" @ref="scheduleObj" Width="100%" ModelType="@model" Height="800px" RowAutoHeight="true" CssClass="doctor-appointment-planner" ShowWeekend="false" StartHour="@startHour" EndHour="@endHour" SelectedDate="new DateTime(2018, 7, 5)" WorkDays="@workDay" FirstDayOfWeek="1" @bind-CurrentView="@sceduleView">
                    <ScheduleEvents TValue="HospitalData" OnPopupOpen="EditDialogOpen"></ScheduleEvents>
                    <ScheduleWorkHours Start="08:00" End="21:00"></ScheduleWorkHours>
                    <ScheduleEventSettings DataSource="@scheduleEventData">
                        <ScheduleField>
                            <FieldSubject Name="Name"></FieldSubject>
                            <FieldStartTime Name="StartTime" Title="From"></FieldStartTime>
                            <FieldEndTime Name="EndTime" Title="To"></FieldEndTime>
                            <FieldDescription Name="Symptoms" Title="Symptoms"></FieldDescription>
                        </ScheduleField>
                    </ScheduleEventSettings>
                    <ScheduleTimeScale Enable="true" Interval="60"></ScheduleTimeScale>
                    <ScheduleResources>
                        <ScheduleResource DataSource="@specialistCategory" Field="DepartmentId" Title="Department" Name="Departments" TextField="Text" IdField="DepartmentId" ColorField="Color"></ScheduleResource>
                        <ScheduleResource DataSource="@resourceDataSource" Field="DoctorId" Title="Consultation" Name="Doctors" TextField="Name" IdField="Id" ColorField="Color" GroupIDField="DepartmentId" WorkDaysField="AvailableDays" StartHourField="StartHour" EndHourField="EndHour"></ScheduleResource>
                    </ScheduleResources>
                    <ScheduleViews>
                        <ScheduleView Option="@View.Day"></ScheduleView>
                        <ScheduleView Option="@View.Week"></ScheduleView>
                        <ScheduleView Option="@View.Month"></ScheduleView>
                        <ScheduleView Option="@View.TimelineDay" Group="@resourceGroup">
                        </ScheduleView>
                        <ScheduleView Option="@View.TimelineWeek" Group="@resourceGroup">
                        </ScheduleView>
                        <ScheduleView Option="@View.TimelineWorkWeek" Group="@resourceGroup">
                        </ScheduleView>
                        <ScheduleView Option="@View.TimelineMonth" Group="@resourceGroup">
                        </ScheduleView>
                    </ScheduleViews>
                    <ScheduleTemplates>
                        <DateHeaderTemplate>
                            <div class="date-text">@(getDateHeaderText((context as TemplateArgs).Date))</div>
                        </DateHeaderTemplate>
                    </ScheduleTemplates>
                    <ScheduleQuickInfoTemplates>
                        <HeaderTemplate>
                            <div class="quick-info-header">
                                <div class="quick-info-header-content" style="@(getBackGroundColor((context as TemplateArgs)))">
                                    <div class="quick-info-title">
                                        Appointment Details
                                    </div>
                                    <div class="duration-text">@(getEventDetails((context as TemplateArgs)))</div>
                                </div>
                            </div>
                        </HeaderTemplate>
                        <ContentTemplate>
                            @if ((context as TemplateArgs).ElementType == "cell")
                            {
                                <div class="e-cell-content">
                                    <form class="e-schedule-form">
                                        <div style="padding:10px">
                                            <EjsTextBox CssClass="subject e-field" Placeholder="Title"></EjsTextBox>
                                        </div>
                                        <div style="padding:10px">
                                            <EjsTextBox CssClass="location e-field" Placeholder="Location"></EjsTextBox>
                                        </div>
                                    </form>
                                </div>
                            }
                            else
                            {
                                <div class="event-content">
                                    <div class="patient-name-wrap">
                                        <label>Patient Name</label>:
                                        <span>@(getPatientName((context as TemplateArgs)))</span>
                                    </div>
                                    <div class="doctor-name-wrap">
                                        <label>Doctor Name</label>:
                                        <span>Dr.@(getDoctorName((context as TemplateArgs)))</span>
                                    </div>
                                    <div class="notes-wrap">
                                        <label>Notes</label>:
                                        <span>@((context as TemplateArgs).Symptoms)</span>
                                    </div>
                                </div>
                            }
                        </ContentTemplate>
                    </ScheduleQuickInfoTemplates>
                </EjsSchedule>
            </div>
        </div>
        <div class="col-lg-3 col-md-3 col-sm-3" style="padding: 0px">
            <div class="treeview-container">
                <div>
                    <EjsDropDownList Placeholder="Choose Specialist" Width="220px" PopupHeight="auto" DataSource="@resourceDataSource" TValue="int?" CssClass="planner-dropdown" ShowClearButton="true" ModelType="@dropdownAppointModel">
                        <DropDownListEvents TValue="int?" ValueChange="onValueChange"></DropDownListEvents>
                        <DropDownListFieldSettings Text="Name" Value="Id"></DropDownListFieldSettings>
                        <DropDownListTemplates>
                            <ItemTemplate>
                                <div class="specialist-item">
                                    <img class="value" src="css/appoinment/assets/images/@((context as DoctorsData).Text).png" alt="doctor" />
                                    <div class="doctor-details">
                                        <div class="name">Dr.@((context as DoctorsData).Name)</div>
                                        <div class="designation">@((context as DoctorsData).Designation)</div>
                                    </div>
                                </div>
                            </ItemTemplate>
                            <FooterTemplate>
                                <div class="add-doctor" @onclick="@onAddClick">
                                    <div class="e-icon-add e-icons"></div><div class="add-doctor-text">Add New Doctor</div>
                                </div>
                            </FooterTemplate>
                        </DropDownListTemplates>
                    </EjsDropDownList>
                </div>
                <div class="title-container">
                    <h1 class="title-text">Waiting List</h1>
                </div>
            <EjsTreeView TValue="WaitingList" ModelType="@treeviewModel" LoadOnDemand="false" CssClass="treeview-external-drag" AllowDragAndDrop="true">
                <TreeViewFieldsSettings Id="Id" Text="Name" DataSource="@waitingList"></TreeViewFieldsSettings>
                <TreeViewEvents TValue="WaitingList" OnNodeDragged="NodeDragStop"></TreeViewEvents>
                <TreeViewTemplates>
                    <NodeTemplate>
                        <div id="waiting">
                            <div id="waitdetails">
                                <div id="waitlist">@((context as WaitingList).Name)</div>
                                <div id="event-time">@(getEventTime((context as WaitingList)))</div>
                                <div id="waitcategory">
                                    @(getDepartmentName((context as WaitingList).DepartmentId)) - @(getTreatmentDetail((context as WaitingList)))
                                </div>
                            </div>
                            <div id="item-icon-container">
                                <span class="item-icon icon-reorder"></span>
                            </div>
                        </div>
                    </NodeTemplate>
                </TreeViewTemplates>
            </EjsTreeView>
            </div>
        </div>
    </div>
</div>
@if (OpenDialog)
{
    <AppointmentPlanner.Pages.Doctors.AddEditDoctor IsShow="@OpenDialog"></AppointmentPlanner.Pages.Doctors.AddEditDoctor>
}

@code {

    EjsSchedule<HospitalData> scheduleObj;

    [Inject]
    protected IJSRuntime JsRuntime { get; set; }

    public bool OpenDialog { get; set; } = false;

    private List<HospitalData> scheduleEventData { get; set; } = AppointmentService.HospitalDatas;

    private DoctorsData dropdownAppointModel = new DoctorsData();

    private List<DoctorsData> doctorsListData { get; set; } = AppointmentService.DoctorsDatas;

    private TemplateArgs model = new TemplateArgs();

    private WaitingList treeviewModel = new WaitingList();

    private ScheduleGroup resourceGroup { get; set; } = new ScheduleGroup { EnableCompactView = false, Resources = new string[] { "Departments", "Doctors" } };

    private string startHour { get; set; } = AppointmentService.CalendarSettings.calendar.start;
    private string endHour { get; set; } = AppointmentService.CalendarSettings.calendar.end;
    private int[] workDay { get; set; } = new int[] { 0, 1, 2, 3, 4, 5, 6 };
    private Calendar workHours { get; set; } = AppointmentService.CalendarSettings.calendar;

    private View sceduleView { get; set; }

    private List<SpecializationData> specialistCategory { get; set; } = AppointmentService.SpecializationDatas;
    private List<DoctorsData> resourceDataSource { get; set; } = AppointmentService.DoctorsDatas;

    private object nameValid { get; set; } = new Dictionary<string, object>() { { "required", true } };

    private object startValid { get; set; } = new Dictionary<string, object>() { { "required", true } };
    private object endValid { get; set; } = new Dictionary<string, object>() { { "required", true } };
    private object symValid { get; set; } = new Dictionary<string, object>() { { "required", true }, { "minLength", 5 } };

    private Dictionary<string, object> subjectHtmlAttr { get; set; } = new Dictionary<string, object>() { { "name", "Subject" } };
    private Dictionary<string, object> locationHtmlAttr { get; set; } = new Dictionary<string, object>() { { "name", "Location" } };

    private List<WaitingList> waitingList { get; set; } = AppointmentService.WaitingLists;

    private List<DoctorsData> specialistData { get; set; }
    private List<DoctorsData> doctorsData { get; set; }

    private List<DoctorsData> activeDoctorData { get; set; }
    protected override void OnInitialized()
    {
        sceduleView = (View)Enum.Parse(typeof(View), (AppointmentService.CalendarSettings.currentView as string));
        specialistData = doctorsData = AppointmentService.DoctorsDatas;
    }
    private string getPatientName(TemplateArgs data)
    {
        return AppointmentService.PatientsDatas.Where(item => item.Id.Equals(data.PatientId)).FirstOrDefault().Name;
    }

    private string getDoctorName(TemplateArgs data)
    {
        return AppointmentService.DoctorsDatas.Where(item => item.Id.Equals(data.DoctorId)).FirstOrDefault().Name;
    }

    private string getBackGroundColor(TemplateArgs data)
    {
        string color;
        string fontColor;
        if (scheduleObj.EventSettings.ResourceColorField == "Doctors")
        {
            color = this.doctorsData.Where(item => item.Id.Equals(data.DoctorId)).FirstOrDefault().Color;

        }
        else
        {
            color = data.ElementType == "cell" ? "" : this.specialistCategory.Where(item => item.DepartmentId.Equals(data.DepartmentId)).FirstOrDefault().Color;
        }
        string[] colors = new string[] { "#60F238", "#fec200" };
        if (colors.IndexOf(color) != -1)
        {
            fontColor = "#333333";
        }
        else
        {
            fontColor = "#FFFFFF";
        }
        return "background:" + color + "; color:" + fontColor + ";";
    }
    private string getEventTime(WaitingList data)
    {
        return AppointmentService.GetFormatDate(data.StartTime, "MMMd") + ", " + AppointmentService.GetFormatDate(data.StartTime, "h:mm tt") + "-" + AppointmentService.GetFormatDate(data.EndTime, "h:mm tt");
    }

    private string getDepartmentName(int id)
    {
        SpecializationData specData = this.specialistCategory.Where(item => item.DepartmentId.Equals(id)).FirstOrDefault();
        return specData.Text.ToUpper();
    }

    private string getDateHeaderText(DateTime? date)
    {
        return AppointmentService.GetFormatDate((DateTime)date, "ddd, MMMM d");
    }

    private string getEventDetails(TemplateArgs data)
    {
        return AppointmentService.GetFormatDate(data.StartTime, "dddd dd, MMMM yyyy") + "(" + AppointmentService.GetFormatDate(data.StartTime, "hh:mm tt") + "-" + AppointmentService.GetFormatDate(data.EndTime, "hh:mm tt") + ")";
    }
    private string getTreatmentDetail(WaitingList data)
    {
        if (data.Treatment != null)
        {
            return data.Treatment;
        }
        else
        {
            return "CHECKUP";
        }
    }

    private void createNewEvent(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        var data = new { startTime = new DateTime(2018, 7, 5, 8, 0, 0), endTime = new DateTime(2018, 7, 5, 8, 30, 0) };
        this.scheduleObj.OpenEditor(data, CurrentAction.Add, false, null);
    }

    public void EditDialogOpen(Syncfusion.EJ2.Blazor.Schedule.PopupOpenEventArgs<HospitalData> args)
    {
        if (args.Type == PopupType.QuickInfo)
        {
            if(args.Data.Id == 0) {
                args.Cancel = true;
            }
        }

    }
    private void onValueChange(Syncfusion.EJ2.Blazor.DropDowns.ChangeEventArgs<int?> args)
    {
        if (args.Value != null)
        {
            SpecializationData items = JsonConvert.DeserializeObject<SpecializationData>(args.ItemData.ToString());
            refreshDataSource(items.DepartmentId, items.Id);
        }
        else
        {
            setDefaultData();
        }
    }
    private void refreshDataSource(int deptId, string doctorId)
    {
        List<DoctorsData> filterItem = doctorsListData.Where(item => item.Id.Equals(Int32.Parse(doctorId))).ToList();
        activeDoctorData = filterItem;
        workDay = filterItem[0].AvailableDays;
        workHours = new Calendar { start = filterItem[0].StartHour, end = filterItem[0].EndHour };
        scheduleObj.Resources[0].Query = "new ej.data.Query().where('DepartmentId', 'equal', " + deptId + ")";
        scheduleObj.Resources[0].Query = "new ej.data.Query().where('Id', 'equal', " + Int32.Parse(doctorId) + ")";
        if (filterItem.Count() > 0)
        {
            updateBreakHours(scheduleObj.SelectedDate);
            scheduleEventData = generateEvents(activeDoctorData[0]);
        }
        else
        {
            scheduleEventData = AppointmentService.HospitalDatas;
        }
        this.updateWaitingList((int)deptId);
    }

    private void updateWaitingList(int? deptId)
    {
        var filteredData = AppointmentService.WaitingLists;
        if (deptId != null)
        {
            filteredData = filteredData.Where(item => item.DepartmentId.Equals(deptId)).ToList();
        }
        waitingList = filteredData;
    }

    private void setDefaultData()
    {
        specialistCategory = AppointmentService.SpecializationDatas;
        resourceDataSource = AppointmentService.DoctorsDatas;
        scheduleObj.Resources[0].Query = "new ej.data.Query()";
        scheduleObj.Resources[0].Query = "new ej.data.Query()";
        scheduleEventData = AppointmentService.HospitalDatas;
        updateWaitingList(null);
        startHour = AppointmentService.CalendarSettings.calendar.start;
        endHour = AppointmentService.CalendarSettings.calendar.end;
        workDay = new int[] { 0, 1, 2, 3, 4, 5, 6 };
        workHours = AppointmentService.CalendarSettings.calendar;
        activeDoctorData = new List<DoctorsData>();
    }
    private List<HospitalData> generateEvents(DoctorsData activeData)
    {
        List<HospitalData> filteredEvents = new List<HospitalData>();

        List<HospitalData> datas = AppointmentService.HospitalDatas.Where(item => item.DoctorId == activeData.Id).ToList();

        datas.ForEach((ele) => filteredEvents.Add(ele));

        activeData.WorkDays.ForEach((ele) =>
        {
            if (ele.State != "RemoveBreak")
            {
                int id = filteredEvents.Select(item => item.Id).Max() + 1;

                filteredEvents.Add(new HospitalData() { Id = id, Name = "Break Time", StartTime = (DateTime)ele.BreakStartHour, EndTime = (DateTime)ele.BreakEndHour, DoctorId = activeData.Id });
            }
            if (ele.Enable)
            {
                string shiftValue = (string)activeData.DutyTiming;
                List<HospitalData> createData = new List<HospitalData>();
                var workend = (DateTime)ele.WorkEndHour;
                var workstart = (DateTime)ele.WorkStartHour;
                if (shiftValue == "Shift1")
                {
                    createData.Add(new HospitalData() { StartTime = new DateTime(workstart.Year, workstart.Month, workstart.Day, 17, 0, 0), EndTime = new DateTime(workend.Year, workend.Month, workend.Day, 21, 0, 0) });
                }
                else if (shiftValue == "Shift2")
                {
                    createData.Add(new HospitalData() { StartTime = new DateTime(workstart.Year, workstart.Month, workstart.Day, 8, 0, 0), EndTime = new DateTime(workend.Year, workend.Month, workend.Day, 10, 0, 0) });
                    createData.Add(new HospitalData() { StartTime = new DateTime(workstart.Year, workstart.Month, workstart.Day, 19, 0, 0), EndTime = new DateTime(workend.Year, workend.Month, workend.Day, 21, 0, 0) });
                }
                else
                {
                    createData.Add(new HospitalData() { StartTime = new DateTime(workstart.Year, workstart.Month, workstart.Day, 8, 0, 0), EndTime = new DateTime(workend.Year, workend.Month, workend.Day, 12, 0, 0) });
                }
                createData.ForEach((item) =>
                {
                    int id = filteredEvents.Select(data => data.Id).Max() + 1;

                    filteredEvents.Add(new HospitalData() { Id = id, Name = "Off Work", StartTime = (DateTime)item.StartTime, EndTime = (DateTime)item.EndTime, DoctorId = activeData.Id });
                });
            }
        });
        return filteredEvents;
    }
    private void updateBreakHours(DateTime currentDate)
    {
        List<DateTime> currentViewDates = new List<DateTime>();
        DateTime firstDayOfWeek = AppointmentService.GetWeekFirstDate(currentDate);
        DateTime startDate = firstDayOfWeek;
        DateTime endDate = firstDayOfWeek.AddDays(7);
        do
        {
            currentViewDates.Add(startDate);
            startDate = startDate.AddDays(1);
        } while (startDate.AddDays(startDate.Day) != endDate.AddDays(endDate.Day));
        currentViewDates.ForEach((item) =>
        {
            activeDoctorData[0].WorkDays.ForEach((dayItem) =>
            {
                DateTime dd = (DateTime)dayItem.BreakStartHour;

                if (dd.DayOfWeek == item.DayOfWeek)
                {
                    dayItem.BreakStartHour = resetDateValue((DateTime)dayItem.BreakStartHour, item);
                    dayItem.BreakEndHour = resetDateValue((DateTime)dayItem.BreakEndHour, item);
                    dayItem.WorkStartHour = resetDateValue((DateTime)dayItem.WorkStartHour, item);
                    dayItem.WorkEndHour = resetDateValue((DateTime)dayItem.WorkEndHour, item);
                }
            });
        });
    }
    private DateTime resetDateValue(DateTime date, DateTime item)
    {
        return date = item;
    }
    private void onAddClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        OpenDialog = true;
    }

    public async void NodeDragStop(DragAndDropEventArgs args)
    {
        args.Cancel = true;
        object isScheduleSlot = await args.Target.GetAttribute("role");
        if (isScheduleSlot != null && isScheduleSlot.ToString() == "gridcell")
        {
            CellClickEventArgs cellData = await scheduleObj.GetCellDetails(args.Target);         
            var filteredData = waitingList.Where(item => item.Id.Equals(Int32.Parse(args.DraggedNodeData.Id))).ToList();
            HospitalData eventData;
            object isGroup = await args.Target.GetAttribute("data-group-index");
            if (isGroup != null)
            {
                ResourceDetails<HospitalData> resData = await scheduleObj.GetResourcesByIndex(cellData.GroupIndex);
                eventData = new HospitalData
                {
                    Name = filteredData[0].Name,
                    StartTime = cellData.StartTime,
                    EndTime = cellData.EndTime,
                    IsAllDay = cellData.IsAllDay,
                    Symptoms = filteredData[0].Disease,
                    PatientId = filteredData[0].PatientId,
                    DepartmentId = (resData.GroupData as TemplateArgs).DepartmentId,
                    DoctorId = (resData.GroupData as TemplateArgs).DoctorId
                };
            }
            else
            {
                eventData = new HospitalData
                {
                    Name = filteredData[0].Name,
                    StartTime = cellData.StartTime,
                    EndTime = cellData.EndTime,
                    IsAllDay = cellData.IsAllDay,
                    Symptoms = filteredData[0].Disease,
                    PatientId = filteredData[0].PatientId,
                    DepartmentId = filteredData[0].DepartmentId,
                    DoctorId = Int32.Parse(args.DraggedNodeData.Id)
                };
            }
            this.scheduleObj.OpenEditor(eventData, CurrentAction.Add, true);
        }

    }
}