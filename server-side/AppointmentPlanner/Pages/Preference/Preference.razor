@page "/preference"

@using Newtonsoft.Json;
@using Newtonsoft.Json.Converters;
@using AppointmentPlanner.Data;
@using AppointmentPlanner.Models;
@implements IDisposable;
<div id="preference" class='preference-container'>
    <header>
        <div class="module-title">
            <div class='title'>PREFERENCE</div>
            <div class='underline'></div>
        </div>
    </header>
    <div class="control-container">
        <div class='label-text'>Default View</div>
        <SfDropDownList CssClass='preference-drop-down' ID='CurrentView' @bind-Value="@selectedView" Width="335px" DataSource="@views">
            <DropDownListEvents TValue="string" ValueChange="onValueChange"></DropDownListEvents>
            <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
        </SfDropDownList>
    </div>
    <div class="control-container">
        <div class='label-text'>Calendar Start Time</div>
        <SfDropDownList CssClass='preference-drop-down' ID='CalendarStart' @bind-Value="@selectedStartHour" Width="335px" DataSource="@startHours">
            <DropDownListEvents TValue="string" ValueChange="onValueChange"></DropDownListEvents>
            <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
        </SfDropDownList>
    </div>
    <div class="control-container">
        <div class='label-text'>Calendar End Time</div>
        <SfDropDownList CssClass='preference-drop-down' ID='CalendarEnd' @bind-Value="@selectedEndHour" Width="335px" DataSource="@endHours">
            <DropDownListEvents TValue="string" ValueChange="onValueChange"></DropDownListEvents>
            <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
        </SfDropDownList>
    </div>
    <div class="control-container">
        <div class='label-text'>Slot Duration</div>
        <SfDropDownList CssClass='preference-drop-down' ID='Duration' @bind-Value="@timeInterval" Width="335px" DataSource="@timeSlots">
            <DropDownListEvents TValue="int?" ValueChange="onValueChangeUpdate"></DropDownListEvents>
            <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
        </SfDropDownList>
    </div>
    <div class="control-container">
        <div class='label-text'>Booking Color</div>
        <SfDropDownList CssClass='preference-drop-down' ID='BookingColor' @bind-Value="@selectedCategory" Width="335px" DataSource="@colorCategory">
            <DropDownListEvents TValue="string" ValueChange="onValueChange"></DropDownListEvents>
            <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
        </SfDropDownList>
    </div>
    <div class="control-container">
        <div class='label-text'>First Day of the Week</div>
        <SfDropDownList CssClass='preference-drop-down' ID='FirstDayOfWeek' @bind-Value="@selectedDayOfWeek" Width="335px" DataSource="@dayOfWeeks">
            <DropDownListEvents TValue="int?" ValueChange="onValueChangeUpdate"></DropDownListEvents>
            <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
        </SfDropDownList>
    </div>
</div>


@code{
    [Inject]
    protected AppointmentService Service { get; set; }
    private List<TextValueData> views { get; set; }
    private List<TextValueData> startHours { get; set; }
    private List<TextValueData> endHours { get; set; }
    private List<TextValueNumericData> timeSlots { get; set; }
    private List<TextValueData> colorCategory { get; set; }
    private List<TextValueNumericData> dayOfWeeks { get; set; }
    private string selectedView { get; set; }
    private string selectedStartHour { get; set; }
    private string selectedEndHour { get; set; }
    private string selectedCategory { get; set; }
    private int? timeInterval { get; set; }
    private int? selectedDayOfWeek { get; set; }
    private CalendarSetting cal { get; set; } = new CalendarSetting();
    protected override void OnInitialized()
    {
        this.views = Service.Views;
        this.startHours = Service.StartHours;
        this.endHours = Service.EndHours;
        this.timeSlots = Service.TimeSlot;
        this.colorCategory = Service.ColorCategory;
        this.dayOfWeeks = Service.DayOfWeekList;
        this.selectedView = Service.CalendarSettings.currentView;
        this.selectedStartHour = Service.CalendarSettings.calendar.start;
        this.selectedEndHour = Service.CalendarSettings.calendar.end;
        this.selectedCategory = Service.CalendarSettings.bookingColor;
        this.timeInterval = Service.CalendarSettings.interval;
        this.selectedDayOfWeek = Service.CalendarSettings.firstDayOfWeek;
    }

    private void onValueChangeUpdate(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?> args)
    {
        switch (args.Element.ID)
        {
            case "Duration":
                Service.CalendarSettings.interval = (int)args.Value;
                break;
            case "FirstDayOfWeek":
                Service.CalendarSettings.firstDayOfWeek = (int)args.Value;
                break;
        }
    }
    private void onValueChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        switch (args.Element.ID)
        {
            case "CurrentView":
                Service.CalendarSettings.currentView = args.Value;
                break;
            case "CalendarStart":
                Service.CalendarSettings.calendar.start = args.Value;
                break;
            case "CalendarEnd":
                Service.CalendarSettings.calendar.end = args.Value;
                break;
            case "Duration":
                Service.CalendarSettings.interval = Int32.Parse(args.Value);
                break;
            case "BookingColor":
                Service.CalendarSettings.bookingColor = (string)args.Value;
                break;
            case "FirstDayOfWeek":
                Service.CalendarSettings.firstDayOfWeek = Int32.Parse(args.Value);
                break;
        }
    }

    public void Dispose()
    {
        GC.SuppressFinalize(this);
    }
}