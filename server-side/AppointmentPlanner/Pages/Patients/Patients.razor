@page "/patients"

@using AppointmentPlanner.Data;
@using AppointmentPlanner.Models;

<div id="patient-wrapper" class="planner-patient-wrapper">
    <header>
        <div class="module-title">
            <div class="title">PATIENT LIST</div>
            <div class="underline"></div>
        </div>
        <div class="add-patient" @onclick="@onAddPatient">
            <div class="e-icon-add e-icons"></div>
            <div class="add-patient-label">Add New</div>
        </div>
    </header>
    <div class="patients-detail-wrapper">
        <div class="patient-operations">
            <div id="searchTemplate" class="search-wrapper planner-patient-search">
                <div class="e-input-group patient-search" role="search">
                    <input id="schedule_searchbar" class="e-input" name="input" type="text" @bind-value="@searchValue"
                           placeholder="Search Patient" @oninput="@patientSearch" />
                    <span class="e-clear-icon" aria-label="close" role="button" @onclick="clearText"></span>
                    <span id="schedule_searchbutton" class="e-input-group-icon search-icon e-icons" tabindex="-1"
                          title="Search" aria-label="search"></span>
                </div>
            </div>
            <SfButton CssClass="e-normal add-details" @onclick="@onAddPatient" IsPrimary="true">
                Add
                New Patient
            </SfButton>
        </div>
        <div class="patient-display">
            <SfGrid ID="Grid" @ref="gridObj" DataSource="@FilteredPatients">
                <GridEvents TValue="PatientsData" RowSelected="onRowSelected" OnRecordDoubleClick="onDoubleClick"></GridEvents>
                <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" AllowEditOnDblClick="false" Mode="EditMode.Dialog">
                </GridEditSettings>
                <GridColumns>
                    <GridColumn IsPrimaryKey="true" Field=@nameof(PatientsData.Id) Width="50" HeaderText="ID" TextAlign="@TextAlign.Left"></GridColumn>
                    <GridColumn HeaderText="Name" TextAlign="@TextAlign.Left" Width="100">
                        <Template>
                            <span class="patient-name" @onclick="@(e => onPatientClick(e, (context as PatientsData).Id))">@((context as PatientsData).Name)</span>
                        </Template>
                    </GridColumn>
                    <GridColumn Field=@nameof(PatientsData.Gender) HeaderText="Gender" TextAlign="@TextAlign.Left" Width="80"></GridColumn>
                    <GridColumn Field=@nameof(PatientsData.BloodGroup) HeaderText="Blood Group" TextAlign="@TextAlign.Left" Width="100"></GridColumn>
                    <GridColumn Field=@nameof(PatientsData.Symptoms) HeaderText="Symptoms" TextAlign="@TextAlign.Left" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(PatientsData.Mobile) HeaderText="Mobile Number" TextAlign="@TextAlign.Left" Width="100"></GridColumn>
                    <GridColumn Field=@nameof(PatientsData.Email) HeaderText="Email" TextAlign="@TextAlign.Left" Width="120"></GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>

@if (activePatientData !=null)
{
<SfDialog @ref="GridEditDialogObj" Target="body" Width="390px" @bind-Visible="@GridEditDialog" CssClass="e-edit-dialog" IsModal="true" ShowCloseIcon="true" Header="@gridEditHeader" AnimationSettings="@dialogAnnimation">
    <DialogTemplates>
        <Content>
            <div class="grid-edit-dialog">
                <div class="field-row">
                    <label> Patient Id </label><span id="Id">@((activePatientData as PatientsData).Id)</span>
                </div>
                <div class="field-row">
                    <label> Patient Name </label><span id="Name">@((activePatientData as PatientsData).Name)</span>
                </div>
                <div class="field-row">
                    <label> Gender </label><span id="Gender">@((activePatientData as PatientsData).Gender)</span>
                </div>
                <div class="field-row">
                    <label> DOB </label><span id="DOB">@((activePatientData as PatientsData).DOB)</span>
                </div>
                <div class="field-row">
                    <label> Blood Group </label><span id="BloodGroup">@((activePatientData as PatientsData).BloodGroup)</span>
                </div>
                <div class="field-row">
                    <label> Mobile Number </label><span id="Mobile">@((activePatientData as PatientsData).Mobile)</span>
                </div>
                <div class="field-row">
                    <label> Email </label><span id="Email">@((activePatientData as PatientsData).Email)</span>
                </div>
                <div class="field-row">
                    <label> Symptoms </label><span id="Symptoms">@((activePatientData as PatientsData).Symptoms)</span>
                </div>
                <div class="field-row history-row">
                    <label>Appointment History</label>
                    <div ID="history-wrapper">

                        @foreach (var item in historyData)
                            {
                        <div class="history-content">@(getHistoryFormatDate(item))</div>
                            }
                    </div>
                </div>
            </div>
        </Content>
        <FooterTemplate>
            <div class="button-container" style="display: flex; float: right">
                <SfButton CssClass="e-normal" @onclick="@onDeleteClick">Delete</SfButton>
                <SfButton CssClass="e-normal" IsPrimary="true" @onclick="@gridEditDialog">Edit</SfButton>
            </div>
        </FooterTemplate>
    </DialogTemplates>
</SfDialog>
}


<SfDialog @ref="DialogObj" Target="body" Width="390px" CssClass="new-patient-dialog" IsModal="true" @bind-Visible="@IsShowPatientEditDialog" ShowCloseIcon="true" Header="@patientHeader" AnimationSettings="@dialogAnnimation">
    <ChildContent>
        <EditForm Model="@PatientEditModel" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="name-container">
                <SfTextBox CssClass="patient-name e-field" Placeholder="Patient Name" FloatLabelType="@FloatLabelType.Always" @bind-Value="@PatientEditModel.Name"></SfTextBox>
                <ValidationMessage For="@(() => PatientEditModel.Name)" />
            </div>
            <div class="field-container gender-container">
                <div class="gender">
                    <div><label>Gender</label></div>
                    <div class="e-btn-group e-round-corner e-field">
                        <input type="radio" ID="patientCheckMale" name="Gender" Value="Male" @onchange="@(()=> PatientEditModel.Gender = "Male")" checked />
                        <label class="e-btn" for="patientCheckMale">Male</label>
                        <input type="radio" ID="patientCheckFemale" name="Gender" Value="Female" @onchange="@(()=> PatientEditModel.Gender = "Female")" />
                        <label class="e-btn" for="patientCheckFemale">Female</label>
                    </div>
                </div>
                <div class="dob">
                    <SfDatePicker ID="DOB" CssClass="e-field" Placeholder="DOB" @bind-Value="@PatientEditModel.DOB" Max="DateTime.Now" FloatLabelType="@FloatLabelType.Always" ShowClearButton="false"></SfDatePicker>
                    <ValidationMessage For="@(() => PatientEditModel.DOB)" />
                </div>
            </div>
            <div class="field-container contact-container">
                <div class="mobile" style="width:345px">
                    <SfMaskedTextBox CssClass="e-field" @ref="maskObj" Placeholder="Mobile Number" FloatLabelType="@FloatLabelType.Always" @bind-Value="@PatientEditModel.Mobile" Mask="(999) 999-9999"></SfMaskedTextBox>
                    <ValidationMessage For="@(() => PatientEditModel.Mobile)" />
                </div>
                <div class="blood-group">
                    <SfDropDownList FloatLabelType="@FloatLabelType.Always" CssClass="e-field" Placeholder="Blood Group" @bind-Value="@PatientEditModel.BloodGroup" DataSource="@bloodGroupData">
                        <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                    </SfDropDownList>
                    <ValidationMessage For="@(() => PatientEditModel.BloodGroup)" />
                </div>
            </div>
            <div class="field-container email-container">
                <SfTextBox CssClass="e-field" Placeholder="Email" FloatLabelType="@FloatLabelType.Always" @bind-Value="@PatientEditModel.Email"></SfTextBox>
                <ValidationMessage For="@(() => PatientEditModel.Email)" />
            </div>
            <div class="field-container symptom-container">
                <SfTextBox CssClass="e-field" Placeholder="Symptoms" FloatLabelType="@FloatLabelType.Always" @bind-Value="@PatientEditModel.Symptoms"></SfTextBox>
                <ValidationMessage For="@(() => PatientEditModel.Symptoms)" />
            </div>
            <div class="e-footer-content">
                <div class="button-container">
                    <button type="button" class="e-btn e-normal" @onclick="@onCancelClick">Cancel</button>
                    <button type="submit" class="e-btn e-normal e-primary">@saveButton</button>
                </div>
            </div>
        </EditForm>
    </ChildContent>
</SfDialog>

<SfDialog @bind-Visible="@this.isConfirmDelete" CssClass="confirm-dialog" Width="auto" IsModal="true" ShowCloseIcon="true">
    <DialogTemplates>
        <Header>
            <span>Patient Details</span>
        </Header>
        <Content>
            Are you sure you want to delete this patient?
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton ButtonModel="@deleteDoctorBtn" OnClick="@DeleteBtnClick"></DialogButton>
        <DialogButton ButtonModel="@cancelDoctorBtn" OnClick="@CancelBtnClick"></DialogButton>
    </DialogButtons>
</SfDialog>

@code{
    SfGrid<PatientsData> gridObj;
    SfDialog DialogObj, GridEditDialogObj;

    private string searchValue { get; set; }
    private SfMaskedTextBox maskObj { get; set; }

    public PatientsData PatientEditModel = new PatientsData();
    public List<PatientsData> FilteredPatients { get; set; }

    private string saveButton { get; set; } = "Save";

    private DialogAnimationSettings dialogAnnimation { get; set; } = new DialogAnimationSettings { Effect = DialogEffect.Zoom };

    private List<HospitalData> historyData { get; set; }
    private bool isPatientClicked { get; set; } = false;
    private bool isConfirmDelete { get; set; }
    private ButtonModel deleteDoctorBtn { get; set; } = new ButtonModel { Content = "Ok", IsPrimary = true };
    private ButtonModel cancelDoctorBtn { get; set; } = new ButtonModel { Content = "Cancel" };

    private PatientsData activePatientData { get; set; }

    private bool IsShowPatientEditDialog { get; set; } = false;
    public bool GridEditDialog { get; set; } = false;
    private string patientHeader { get; set; } = "New Patient";
    private string gridEditHeader { get; set; } = "Patient Details";
    private bool isValid { get; set; }
    public PatientsData patientModel = new PatientsData();

    private List<TextValueData> bloodGroupData { get; set; } = AppointmentService.BloodGroupData;

    private DateTime? dobValue { get; set; } = DateTime.Now;
    private List<DoctorsData> doctorsData = AppointmentService.DoctorsDatas;
    public PatientsData EditData { get; set; } = AppointmentService.PatientsDatas[0];
    protected override void OnInitialized()
    {
        FilteredPatients = AppointmentService.PatientsDatas;
    }

    private void onAddPatient(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        saveButton = "Save";
        PatientEditModel = new PatientsData { Name = null, Gender = "Male", Mobile = null, Email = null, Symptoms = null };
        this.IsShowPatientEditDialog = true;
    }
    private void onCancelClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        this.DialogObj.Hide();
    }
    public async Task HandleValidSubmit()
    {
        PatientsData getRecord = null;
        string message = "";
        string name = "";
        string mobileNo = await this.maskObj.GetMaskedValue();
        if (saveButton == "Save")
        {
            getRecord = new PatientsData(AppointmentService.PatientsDatas.LastOrDefault().Id + 1, PatientEditModel.Name, PatientEditModel.Name, PatientEditModel.DOB, mobileNo, PatientEditModel.Email, AppointmentService.PatientsDatas[0].Address, AppointmentService.PatientsDatas[0].Disease, AppointmentService.PatientsDatas[0].DepartmentName, PatientEditModel.BloodGroup, PatientEditModel.Gender, PatientEditModel.Symptoms);
            gridObj.AddRecord(getRecord, AppointmentService.PatientsDatas.Count());
            message = " " + getRecord.Name + " for " + getRecord.Symptoms;
            name = "Added New Patient";
        }
        else
        {
            getRecord = new PatientsData(activePatientData.Id, PatientEditModel.Name, PatientEditModel.Name, PatientEditModel.DOB, mobileNo, PatientEditModel.Email, activePatientData.Address, activePatientData.Disease, activePatientData.DepartmentName, PatientEditModel.BloodGroup, PatientEditModel.Gender, PatientEditModel.Symptoms);
            gridObj.UpdateRow((activePatientData.Id - 1), getRecord);
            message = " " + getRecord.Name + " for " + getRecord.Symptoms;
            name = "Updated Patient";
        }
        AppointmentService.ActivityDatas.Insert(0, new ActivityData { Name = name, Message = message, Time = "10 mins ago", Type = "patient", ActivityTime = DateTime.Now });
        this.DialogObj.Hide();
    }

    public void onRowSelected(RowSelectEventArgs<PatientsData> args)
    {
        if (isPatientClicked)
        {
            this.showDialog(args.Data);
            this.isPatientClicked = false;
        }
    }
    public void onDoubleClick(RecordDoubleClickEventArgs<PatientsData> args)
    {
        this.showDialog(args.RowData);
    }
    private void showDialog(PatientsData data)
    {
        saveButton = "Update";
        GridEditDialog = true;
        AppointmentService.ActivePatientData = activePatientData = data;
        historyData = AppointmentService.HospitalDatas.Where(item => item.PatientId.Equals(data.Id)).ToList();
    }

    private void onDeleteClick()
    {
        this.isConfirmDelete = true;
    }

    private void gridEditDialog()
    {
        GridEditDialog = false;
        PatientEditModel = new PatientsData { Name = activePatientData.Name, Gender = activePatientData.Gender, Mobile = activePatientData.Mobile, Email = activePatientData.Email, Symptoms = activePatientData.Symptoms };
        this.IsShowPatientEditDialog = true;
    }

    private void onPatientClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs args, int Id)
    {
        this.gridObj.SelectRow(Id - 1);
        this.isPatientClicked = true;
        this.GridEditDialog = true;
    }

    private void patientSearch(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        var patientData = AppointmentService.PatientsDatas;
        this.FilteredPatients = (from cust in patientData
                                 where (cust.Name.Contains(args.Value.ToString(), StringComparison.OrdinalIgnoreCase)) || (cust.Gender.Contains(args.Value.ToString(), StringComparison.OrdinalIgnoreCase)) || (cust.Email.Contains(args.Value.ToString(), StringComparison.OrdinalIgnoreCase)) || (cust.Id.ToString().Contains(args.Value.ToString(), StringComparison.OrdinalIgnoreCase)) || (cust.Mobile.Contains(args.Value.ToString(), StringComparison.OrdinalIgnoreCase)) || ((cust.BloodGroup as string).Contains(args.Value.ToString(), StringComparison.OrdinalIgnoreCase))
                                 select cust).ToList();
    }

    private string getHistoryFormatDate(HospitalData data)
    {
        return AppointmentService.GetFormatDate(data.StartTime, "MMMM dd") + "-" + AppointmentService.GetFormatDate(data.StartTime, "hh:mm tt") + "-" + AppointmentService.GetFormatDate(data.EndTime, "hh:mm tt") + " Appointment with Dr." + getDoctorName(data.DoctorId);
    }

    private string getDoctorName(int Id)
    {
        return doctorsData.Where(item => item.Id.Equals(Id)).FirstOrDefault().Name;
    }

    private void clearText()
    {
        this.searchValue = "";
        this.FilteredPatients = AppointmentService.PatientsDatas;
    }

    private void DeleteBtnClick()
    {
        var patientData = ((List<PatientsData>)FilteredPatients).Where(item => item.Id != activePatientData.Id).ToList();
        FilteredPatients = AppointmentService.PatientsDatas = patientData;
        var deleteData = ((List<PatientsData>)FilteredPatients).Where(item => item.Id == activePatientData.Id).FirstOrDefault();
        this.gridObj.DeleteRecord(null, deleteData);
        this.isConfirmDelete = false;
        //this.GridEditDialogObj.Hide();
        this.GridEditDialog = false;
        this.IsShowPatientEditDialog = false;
    }
    private void CancelBtnClick()
    {
        this.isConfirmDelete = false;
    }

}
