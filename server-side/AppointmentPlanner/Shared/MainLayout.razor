@inherits LayoutComponentBase

@inject NavigationManager UriHelper
@using AppointmentPlanner.Data;
@using AppointmentPlanner.Models;
@using Microsoft.JSInterop;
 
<div class="sb-content-overlay @(hide)">
    <div class="sb-loading">
        <svg class="circular" height="40" width="40">
            <circle class="path" cx="25" cy="25" r="20" fill="none" stroke-width="6" stroke-miterlimit="10" />
        </svg>
    </div>
</div>
<div class="planner-wrapper" style="width: 100%; visibility:@(visible); opacity:@(opacity)">
    <EjsSidebar ID="plannerSiderBar" @ref="SidebarObj" EnableGestures="false" MediaQuery="(min-width: 600px)" Type="SidebarType.Auto" Created="OnCreate">
        <ChildContent>
            <div class="dock">
                <div class="info align-center">
                    <div class="image"><img src="css/appoinment/assets/images/Admin.png" /></div>
                    <div class="content nameContent">
                        <p class='name'>Jane Deo</p>
                        <p class='user-type'>Admin</p>
                    </div>
                </div>
                <EjsListView CssClass="menulist" ShowIcon="true" DataSource="@navigationItems" Enable="true">
                    <ListViewTemplates>
                        <Template>
                            @if ((context as NavigationMenuData) != null)
                            {
                                var currentPath = UriHelper.Uri;
                                var baseUri = UriHelper.BaseUri;
                                activeClass = ((currentPath == baseUri) && activeClass == null) ? "nav-link sidebar-item active" : "nav-link sidebar-item";
                            <NavLink class="@(activeClass)" href="@((context as NavigationMenuData).Value)" Match="NavLinkMatch.Prefix">
                                <span class="dashboard-image">
                                    <span class="item-image @((context as NavigationMenuData).Icon)"></span>
                                </span>
                                <span class="text" title="dashboard">@((context as NavigationMenuData).Text)</span>
                            </NavLink>
                            }
                        </Template>
                    </ListViewTemplates>
                    <ListViewFieldSettings Text="Text" Id="Value" IconCss="Icon" Tooltip="Text"></ListViewFieldSettings>
                </EjsListView>
            </div>
        </ChildContent>
    </EjsSidebar>
    <main>
        <div class="planner-header">
            <div class="side-bar-opener">
                <span class="open-icon e-icons" @onclick="@showSideBar"></span>
            </div>
            <div class="name-cantainer">
                <span class="clinic-image icon-logo"></span>
                <h1 class="clinic-name appointment-title">APPOINTMENT PLANNER</h1>
            </div>
            <div class='logout-container'>
                <div class="logout-icon-container"><span class="icon-logout logout-image"></span></div>
                <span class='logout-name'>Logout</span>
            </div>
        </div>
        @Body
    </main>
</div>


@code{

    EjsSidebar SidebarObj;
    [Inject]
    protected IJSRuntime JsRuntime { get; set; }

    private string target { get; set; } = "#loader-content";

    private string visible { get; set; } = "hidden";

    private string hide { get; set; }
    private string opacity { get;set; } = "0";
    public NavigationMenuData ListModel = new NavigationMenuData();
    private List<NavigationMenuData> navigationItems = NavigationMenuData.GetNavigationItems();
    private string activeClass { get; set; } = null;

    public void OnCreate()
    {
        this.hide = "sb-hide";
        this.visible = "visible";
        this.opacity = "1";
    }

    protected override void OnInitialized()
    {
        AppointmentService.startDate = new DateTime(2018, 7, 5, 0, 0, 0, 0);
        AppointmentService.ActiveDoctorData = DoctorsData.GetDoctorsData().FirstOrDefault();
        AppointmentService.ActivePatientData = PatientsData.GetPatientsData().FirstOrDefault();
        AppointmentService.StartHours = TextValueData.GetStartHours();
        AppointmentService.EndHours = TextValueData.GetEndHours();
        AppointmentService.Views = TextValueData.GetViews();
        AppointmentService.ColorCategory = TextValueData.GetColorCategory();
        AppointmentService.BloodGroupData = TextValueData.GetBloodGroupData();
        AppointmentService.DayOfWeekList = TextValueNumericData.GetDayOfWeekList();
        AppointmentService.TimeSlot = TextValueNumericData.GetTimeSlot();
        AppointmentService.HospitalDatas = HospitalData.GetHospitalData();
        AppointmentService.PatientsDatas = PatientsData.GetPatientsData();
        AppointmentService.DoctorsDatas = DoctorsData.GetDoctorsData();
        AppointmentService.WaitingLists = WaitingList.GetWaitingList();
        AppointmentService.SpecializationDatas = SpecializationData.GetSpecializationData();
        AppointmentService.DutyTimings = TextIdData.DutyTimingsData();
        AppointmentService.ExperienceData = TextIdData.ExperienceData();
        AppointmentService.ActivityDatas = ActivityData.GetActivityData();
        AppointmentService.NavigationMenuDatas = NavigationMenuData.GetNavigationItems();
        AppointmentService.CalendarSettings = new CalendarSetting { bookingColor = "Doctors", calendar = new AppointmentPlanner.Models.Calendar { start = "08:00", end = "21:00" }, currentView = "Week", interval = 60, firstDayOfWeek = 0 };
    }

    private void showSideBar()
    {
        this.SidebarObj.Show();
    }
}