@inherits LayoutComponentBase

@inject NavigationManager UriHelper
@using AppointmentPlanner.Data;
@using AppointmentPlanner.Models;
@using Microsoft.JSInterop;
@inject IJSRuntime JSRuntime;

<div class="sb-content-overlay @(hide)">
    <div class="sb-loading">
        <svg class="circular" height="40" width="40">
            <circle class="path" cx="25" cy="25" r="20" fill="none" stroke-width="6" stroke-miterlimit="10" />
        </svg>
    </div>
</div>
<div class="planner-wrapper" style="width: 100%; visibility:@(visible); opacity:@(opacity)">
    <SfSidebar ID="plannerSiderBar" @ref="SidebarObj" EnableGestures="false"  MediaQuery="(min-width: 600px)" Type="SidebarType.Auto" Created="OnCreate" CloseOnDocumentClick="onDocumentClick">
        <ChildContent>
                <div class="dock">
                    <div class="info align-center">
                        <div class="image"><img src="css/appoinment/assets/images/Admin.png" alt="Admin" /></div>
                        <div class="content nameContent">
                            <p class='name'>Jane Deo</p>
                            <p class='user-type'>Admin</p>
                        </div>
                    </div>
                    <SfListView CssClass="menulist" TValue="NavigationMenuData" ShowIcon="true" DataSource="@navigationItems" Enable="true">
                        <ListViewTemplates TValue="NavigationMenuData">
                            <Template>
                                @if ((context as NavigationMenuData) != null)
                                {
                                    var currentPath = UriHelper.Uri;
                                    var baseUri = UriHelper.BaseUri;
                                    var checkPath = currentPath.Contains("dashboard") || currentPath.Contains("schedule") || currentPath.Contains("doctors") || currentPath.Contains("patients") || currentPath.Contains("preference") || currentPath.Contains("about");
                                    activeClass = (!checkPath && (context as NavigationMenuData).Value == "dashboard") ? "nav-link sidebar-item active" : "nav-link sidebar-item";
                                    <NavLink class="@(activeClass)" href="@((context as NavigationMenuData).Value)" Match="NavLinkMatch.Prefix">
                                        <span class="dashboard-image">
                                            <span class="item-image @((context as NavigationMenuData).Icon)"></span>
                                        </span>
                                        <span class="text" title="@((context as NavigationMenuData).Text)">@((context as NavigationMenuData).Text)</span>
                                    </NavLink>
                                }
                            </Template>
                        </ListViewTemplates>
                        <ListViewFieldSettings Text="Text" Id="Value" IconCss="Icon" Tooltip="Text"></ListViewFieldSettings>
                        <ListViewEvents TValue="NavigationMenuData" Selected="@onSelectedItem"></ListViewEvents>
                    </SfListView>
                </div>
        </ChildContent>
    </SfSidebar>
    <main>
        <div class="planner-header">
            <div class="side-bar-opener">
                <span class="open-icon e-icons" @onclick="@showSideBar"></span>
            </div>
            <div class="name-cantainer">
                <span class="clinic-image icon-logo"></span>
                <h1 class="clinic-name appointment-title">APPOINTMENT PLANNER</h1>
            </div>
            <div class='logout-container'>
                <div class="logout-icon-container"><span class="icon-logout logout-image"></span></div>
                <span class='logout-name'>Logout</span>
            </div>
            <div class="sb-header-item sb-table-cell sb-download-wrapper">
                <a href="https://github.com/syncfusion/ej2-showcase-blazor-appointment-planner" target="_blank">
                    <div id="github" class="sb-github-btn">
                        <div class="github-image">
                            <img src="css/appoinment/mark.svg" />
                        </div>
                    </div>
                </a>
            </div>
        </div>
        @Body
    </main>
</div>

@code{

    SfSidebar SidebarObj;
    [Inject]
    protected IJSRuntime JsRuntime { get; set; }

    private string SideBarToggleClass { get; set; }
    private bool onDocumentClick { get; set; }
    private bool isDevice { get; set; }

    private string target { get; set; } = "#loader-content";

    private string visible { get; set; } = "hidden";
    private string OverlayClass { get; set; }

    private string hide { get; set; }
    private string opacity { get; set; } = "0";
    public NavigationMenuData ListModel = new NavigationMenuData();
    private List<NavigationMenuData> navigationItems = NavigationMenuData.GetNavigationItems();
    private string activeClass { get; set; } = null;

    public void OnCreate()
    {
        this.hide = "sb-hide";
        this.visible = "visible";
        this.opacity = "1";
    }

    protected override void OnInitialized()
    {
        AppointmentService.startDate = new DateTime(2019, 7, 5, 0, 0, 0, 0);
        AppointmentService.ActiveDoctorData = DoctorsData.GetDoctorsData().FirstOrDefault();
        AppointmentService.ActivePatientData = PatientsData.GetPatientsData().FirstOrDefault();
        AppointmentService.StartHours = TextValueData.GetStartHours();
        AppointmentService.EndHours = TextValueData.GetEndHours();
        AppointmentService.Views = TextValueData.GetViews();
        AppointmentService.ColorCategory = TextValueData.GetColorCategory();
        AppointmentService.BloodGroupData = TextValueData.GetBloodGroupData();
        AppointmentService.DayOfWeekList = TextValueNumericData.GetDayOfWeekList();
        AppointmentService.TimeSlot = TextValueNumericData.GetTimeSlot();
        AppointmentService.HospitalDatas = HospitalData.GetHospitalData();
        AppointmentService.PatientsDatas = PatientsData.GetPatientsData();
        AppointmentService.DoctorsDatas = DoctorsData.GetDoctorsData();
        AppointmentService.WaitingLists = WaitingList.GetWaitingList();
        AppointmentService.SpecializationDatas = SpecializationData.GetSpecializationData();
        AppointmentService.DutyTimings = TextIdData.DutyTimingsData();
        AppointmentService.ExperienceData = TextIdData.ExperienceData();
        AppointmentService.ActivityDatas = ActivityData.GetActivityData();
        AppointmentService.NavigationMenuDatas = NavigationMenuData.GetNavigationItems();
        AppointmentService.CalendarSettings = new CalendarSetting { bookingColor = "Doctors", calendar = new AppointmentPlanner.Models.Calendar { start = "08:00", end = "21:00" }, currentView = "Week", interval = 60, firstDayOfWeek = 0 };
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.isDevice = await JSRuntime.InvokeAsync<bool>("checkBrowserDevice");
            this.onDocumentClick = this.isDevice;
        }
    }

    private void showSideBar()
    {
        this.SidebarObj.Show();
    }
    private void onSelect()
    {
        
    }
    private void onSelectedItem(Syncfusion.Blazor.Lists.SelectEventArgs<NavigationMenuData> args)
    {
        if (this.isDevice)
        {
            this.SidebarObj.Hide();
        }
    }
}